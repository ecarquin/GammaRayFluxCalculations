#include <TTree.h>
#include <TFile.h>
#include <vector>
#include <TH1.h>
#include <TAxis.h>
#include <TROOT.h>
#include <TCanvas.h>
#include <TLegend.h>
#include <TStyle.h>
#include <TPaveText.h>

#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <stdio.h>
#include <math.h>
#include <algorithm>

void MakePlots()
{
   gROOT->SetBatch(1);
   gStyle->SetOptStat(0);

   // Open files with stable final state particles from different gravitino decay modes   
   TFile *f=TFile::Open("outputs/Channel_3500.root","READ");

   double bins2[120] = {  1.00000000e-04,   1.08047182e-04,   1.16741936e-04,   1.26136372e-04,\
   1.36286796e-04,   1.47254043e-04,   1.59103844e-04,   1.71907220e-04,\
   1.85740907e-04,   2.00687817e-04,   2.16837531e-04,   2.34286842e-04,\
   2.53140332e-04,   2.73510995e-04,   2.95520924e-04,   3.19302031e-04,\
   3.44996847e-04,   3.72759372e-04,   4.02755998e-04,   4.35166507e-04,\
   4.70185149e-04,   5.08021805e-04,   5.48903245e-04,   5.93074490e-04,\
   6.40800274e-04,   6.92366640e-04,   7.48082646e-04,   8.08282219e-04,\
   8.73326162e-04,   9.43604310e-04,   1.01953787e-03,   1.10158194e-03,\
   1.19022824e-03,   1.28600808e-03,   1.38949549e-03,   1.50131073e-03,\
   1.62212394e-03,   1.75265921e-03,   1.89369889e-03,   2.04608829e-03,\
   2.21074074e-03,   2.38864308e-03,   2.58086154e-03,   2.78854817e-03,\
   3.01294772e-03,   3.25540512e-03,   3.51737350e-03,   3.80042296e-03,\
   4.10624992e-03,   4.43668733e-03,   4.79371565e-03,   5.17947468e-03,\
   5.59627645e-03,   6.04661901e-03,   6.53320146e-03,   7.05894009e-03,\
   7.62698586e-03,   8.24074331e-03,   8.90389094e-03,   9.62040327e-03,\
   1.03945747e-02,   1.12310450e-02,   1.21348277e-02,   1.31113394e-02,\
   1.41664327e-02,   1.53064314e-02,   1.65381678e-02,   1.78690243e-02,\
   1.93069773e-02,   2.08606449e-02,   2.25393390e-02,   2.43531207e-02,\
   2.63128607e-02,   2.84303046e-02,   3.07181430e-02,   3.31900880e-02,\
   3.58609548e-02,   3.87467512e-02,   4.18647729e-02,   4.52337074e-02,\
   4.88737463e-02,   5.28067057e-02,   5.70561576e-02,   6.16475706e-02,\
   6.66084629e-02,   7.19685673e-02,   7.77600091e-02,   8.40174987e-02,\
   9.07785399e-02,   9.80836545e-02,   1.05976625e-01,   1.14504757e-01,\
   1.23719163e-01,   1.33675070e-01,   1.44432146e-01,   1.56054865e-01,\
   1.68612884e-01,   1.82181470e-01,   1.96841945e-01,   2.12682175e-01,\
   2.29797097e-01,   2.48289288e-01,   2.68269580e-01,   2.89857721e-01,\
   3.13183101e-01,   3.38385515e-01,   3.65616014e-01,   3.95037801e-01,\
   4.26827213e-01,   4.61174777e-01,   4.98286351e-01,   5.38384362e-01,\
   5.81709133e-01,   6.28520327e-01,   6.79098503e-01,   7.33746797e-01,\
   7.92792739e-01,   8.56590215e-01,   9.25521591e-01,   1.00000000e+00};

   TH1F * hgamma = new TH1F("hgamma","Spectrum",119,bins2);
   TH1F * helect = new TH1F("helect","Spectrum",119,bins2);
   TH1F * hposit = new TH1F("hposit","Spectrum",119,bins2);
   TH1F * hantip = new TH1F("hantip","Spectrum",119,bins2);

   // Get the trees stored on the files
   TTree *t=(TTree*)f->Get("t");

   gStyle->SetOptStat(11111);

   // Define pointers to be filled with the branches contents
   std::vector<float>* Ee;
   std::vector<float>* Ep;
   std::vector<float>* Eg;
   std::vector<float>* Eap;

   Ee=0;Ep=0;Eg=0;Eap=0;

   // Set branches addresses
   t->SetBranchAddress("E_e",&Ee);
   t->SetBranchAddress("E_p",&Ep);
   t->SetBranchAddress("E_g",&Eg);
   t->SetBranchAddress("E_ap",&Eap);

   // Get the total number of entries (all trees are supposed to have the same number of entries) 
   int nEntries = t->GetEntries();

   std::cout << " nEntries t " << t->GetEntries() << std::endl;

   std::cout << "Now running for mass: " << 3500 << std::endl;

   for(int ientry=0;ientry<nEntries;ientry++)
   {
      t->GetEntry(ientry);

      // Fill the corresponding histograms for each particular decay mode and for each particle type 
      // For electrons,positrons,photons and antiprotons

      for(size_t i=0;i<Ee->size();i++) helect->Fill(2*Ee->at(i)/3500);
      for(size_t i=0;i<Ep->size();i++) hposit->Fill(2*Ep->at(i)/3500);
      for(size_t i=0;i<Eg->size();i++) hgamma->Fill(2*Eg->at(i)/3500);
      for(size_t i=0;i<Eap->size();i++) hantip->Fill(2*Eap->at(i)/3500);
   }

   hgamma->Scale(1./nEntries);
   helect->Scale(1./nEntries);
   hposit->Scale(1./nEntries);
   hantip->Scale(1./nEntries);

   std::stringstream hname,tname,mass;   

   tname << "outputs/dnde_gamma_" << "Channel" << "_" << 3500 << ".txt";
   std::ofstream ot(tname.str().c_str());
   for (UInt_t j=1;j<hgamma->GetXaxis()->GetNbins()+2;j++) {
      ot << hgamma->GetBinCenter(j) << " " << log(10)*sqrt(hgamma->GetBinLowEdge(j)*(hgamma->GetBinLowEdge(j)+hgamma->GetBinWidth(j)))*hgamma->GetBinContent(j)/hgamma->GetBinWidth(j) << std::endl;
   }
   ot.close();
   tname.str("");

   tname << "outputs/dnde_elect_" << "Channel" << "_" << 3500 << ".txt";
   std::ofstream ote(tname.str().c_str());
   for (UInt_t j=1;j<helect->GetXaxis()->GetNbins()+2;j++) {
      ote << helect->GetBinCenter(j) << " " << log(10)*sqrt(helect->GetBinLowEdge(j)*(helect->GetBinLowEdge(j)+helect->GetBinWidth(j)))*helect->GetBinContent(j)/helect->GetBinWidth(j) << std::endl;
   }
   ote.close();
   tname.str("");

   tname << "outputs/dnde_posit_" << "Channel" << "_" << 3500 << ".txt";
   std::ofstream ott(tname.str().c_str());
   for (UInt_t j=1;j<hposit->GetXaxis()->GetNbins()+2;j++) {
      ott << hposit->GetBinCenter(j) << " " << log(10)*sqrt(hposit->GetBinLowEdge(j)*(hposit->GetBinLowEdge(j)+hposit->GetBinWidth(j)))*hposit->GetBinContent(j)/hposit->GetBinWidth(j) << std::endl;
   }
   ott.close();
   tname.str("");

   tname << "outputs/dnde_antip_" << "Channel" << "_" << 3500 << ".txt";
   std::ofstream otp(tname.str().c_str());
   for (UInt_t j=1;j<hantip->GetXaxis()->GetNbins()+2;j++) {
      otp << hantip->GetBinCenter(j) << " " << log(10)*sqrt(hantip->GetBinLowEdge(j)*(hantip->GetBinLowEdge(j)+hantip->GetBinWidth(j)))*hantip->GetBinContent(j)/hantip->GetBinWidth(j) << std::endl;
   }
   otp.close();

}


